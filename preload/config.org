#+TITLE: SwanEmacs - preload

* Table of contents                                            :noexport:toc:
- [[#system][System]]
- [[#main-directories-and-files][Main directories and files]]
  - [[#path][Path]]
  - [[#system-info][System info]]
  - [[#subdirectories][Subdirectories]]
  - [[#org-files][Org files]]
- [[#safe-local-variables][Safe local variables]]
- [[#projectile][Projectile]]

* System

  #+begin_src emacs-lisp :tangle yes
    (setq swanemacs-root-dir "~")

    (with-eval-after-load 'swanemacs-basic
      ;; (load-theme 'doom-one t)
      (swanemacs-basic-set-font "Source Code Pro" 105))

    ;; (setq url-proxy-services '(("http" . "localhost:3128")
    ;;                            ("https" . "localhost:3128")))
  #+end_src

* Main directories and files

** Path

#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'gnu/linux)
    (add-to-list 'exec-path "~/.local/bin"))
#+END_SRC

** System info

#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (bound-and-true-p swanemacs-root-dir)
    (error "Missing system info."))
#+END_SRC

** Subdirectories

Important subdirectories for my workflow.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq swanemacs-org-dir (concat swanemacs-root-dir "org/")
        swanemacs-tmp-dir (concat swanemacs-root-dir "tmp/")
        swanemacs-backup-dir (concat swanemacs-tmp-dir "emacs-backup/"))

  (let ((dir-list (list swanemacs-org-dir
                        swanemacs-tmp-dir
                        swanemacs-backup-dir)))
    (dolist (dir dir-list)
      (unless (file-exists-p dir)
        (make-directory dir t))))
#+END_SRC

** Org files

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq swanemacs-org-todo-file (concat swanemacs-org-dir "todo.org")
        swanemacs-org-entourage-file (concat swanemacs-org-dir "entourage.org"))
#+END_SRC

* Safe local variables

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq safe-local-variable-values
        '((eval add-hook 'after-save-hook
                (lambda () (org-babel-tangle))
                nil t)))

  (put 'org-inlinetask-min-level 'safe-local-variable #'numberp)
#+END_SRC

* Projectile

I encountered some problems with Projectile-related variables when
they were loaded after everything else.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq projectile-known-projects-file
	(locate-user-emacs-file "projectile/bookmarks.eld"))

  (with-eval-after-load 'projectile
    (setq projectile-indexing-method 'native
	  projectile-enable-caching t
	  projectile-track-known-projects-automatically nil)

    (setq projectile-cache-file
	  (locate-user-emacs-file "projectile/projectile.cache")))
#+END_SRC

