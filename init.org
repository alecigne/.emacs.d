#+TITLE: SwanEmacs initialization
#+AUTHOR: Anthony Le Cigne

This file will tangle =init.el= automatically every time it is saved
(see the "Local config" section at the end of the file). Thus the
=init.el= file shouldn't have to be edited by hand.

* Table of contents                                            :toc@1:noexport:
- [[#preinit][Preinit]]
- [[#packages][Packages]]
- [[#bootstrapping-use-package][Bootstrapping =use-package=]]
- [[#low-level-config][Low-level config]]
- [[#modules-and-personal-config][Modules and personal config]]
- [[#a-final-message][A final message]]
- [[#local-config][Local config]]

* Preinit

** Early init

Emacs 27.1 offers an "early init" system. From =M-x view-emacs-news=:

 #+begin_quote
Emacs can now be configured using an early init file. The file is
called "early-init.el", in 'user-emacs-directory'.  It is loaded very
early in the startup process: before graphical elements such as the
tool bar are initialized, and before the package manager is
initialized.  The primary purpose is to allow customizing how the
package system is initialized given that initialization now happens
before loading the regular init file (see below).

We recommend against putting any customizations in this file that
don't need to be set up before initializing installed add-on packages,
because the early init file is read too early into the startup
process, and some important parts of the Emacs session, such as
'window-system' and other GUI features, are not yet set up, which
could make some customization fail to work.
 #+end_quote

Theses blocks will be exported to =early-init.el=.

#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Emacs 27+ pre-init -*- lexical-binding: t -*-

  ;; Optimize some params during startup and reboot them afterwards
  (let ((default-gc-cons-threshold gc-cons-threshold)
        (default-file-name-handler-alist file-name-handler-alist)
        (start-time (current-time)))
    (setq gc-cons-threshold most-positive-fixnum
          file-name-handler-alist nil)
    (add-hook 'emacs-startup-hook
              (lambda ()
                (setq file-name-handler-alist default-file-name-handler-alist)
                ;; The first GC might take a while. Do it while idle.
                (run-with-idle-timer
                 5 nil
                 (lambda ()
                   (setq gc-cons-threshold default-gc-cons-threshold)
                   (garbage-collect)))
                (message "Emacs started in %.03fs." (float-time (time-since start-time))))))

  ;; Tweak UI
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (fringe-mode '(2 . 0))
  (setq frame-inhibit-implied-resize t)

  ;; Do not initialize packages automatically
  (setq package-enable-at-startup nil)
#+end_src

** Files and directories

*** Special directories

#+begin_src emacs-lisp
  (defvar swanemacs-modules-dir nil
    "Emacs modules directory.")

  (defvar swanemacs-lisp-dir nil
    "Elisp directory, for packages outside ELPA.")

  (defvar swanemacs-preload-dir nil
    "Personal Emacs configuration directory - preload.")

  (defvar swanemacs-el-regex nil
    "A regex for detecting Emacs Lisp files to load.")

  (setq swanemacs-modules-dir (expand-file-name "modules/elisp/" user-emacs-directory)
        swanemacs-lisp-dir (expand-file-name "lisp/" user-emacs-directory)
        swanemacs-preload-dir (expand-file-name "preload/" user-emacs-directory)
        swanemacs-el-regex "^[^#\.].*.el$")
#+end_src

*** =custom.el=

Emacs will keep the custom settings in a separate =custom.el= file in
the personal directory:

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** Coding system

Get rid of annoying warnings about UTF8:

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)
#+end_src

* Packages

=package.el= is bundled with Emacs 24 and newer. From [[http://wikemacs.org/wiki/Package.el][here]]:

#+begin_quote
=package.el= connects to a list of package repositories, retrieves the
list of the packages there, presents it to you in a interactive
fashion and lets you install the packages you like (of course you can
also remove the ones you don’t like). =package.el= understands the
dependencies between packages and if one package requires others to
run they will be installed automatically (which is really neat).
#+end_quote

~package-initialize~ is important here since it takes care of the
autoloads.

#+begin_src emacs-lisp
  (setq package-quickstart t)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
#+end_src

* Bootstrapping =use-package=

John Wiegley's [[https://github.com/jwiegley/use-package][=use-package=]]. The Emacs command
~pp-macroexpand-last-sexp~ is useful here to understand what it does
exactly.

If =use-package= is not installed, refresh the package archive and
install it (this happens when I bootstrap the config):

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

I always want my package to be deferred by default since =package.el=
provides autoloads. Without this, a call to =use-package= with no
explicit mention of ~:defer t~ will require the entire package.

When I know that nothing will load the package (no call to an
autoloaded function, no ~:bind~ or ~:command~ keywords in the
~use-package~ expression, etc.), I use ~:demand t~.

#+begin_src emacs-lisp
  (setq use-package-always-defer t
        use-package-always-ensure t)
#+end_src

[[https://github.com/jwiegley/use-package#use-packageel-is-no-longer-needed-at-runtime][use-package.el is no longer needed at runtime]]:

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))
#+end_src

=use-package= takes advantage of the [[https://elpa.gnu.org/packages/delight.html][=delight=]] package:

#+begin_quote
Enables you to customise the mode names displayed in the mode line.
#+end_quote

#+begin_src emacs-lisp
  (use-package delight)
#+end_src

* Low-level config

Before loading the modules, here are a few customizations that should
always take place.

** Lisp directory

Emacs sometimes depend on extensions that are not available within
itself, nor in the distribution =site-lisp= or in ELPA ([[https://github.com/dimitri/el-get][=el-get=]] could
be useful here). These extensions are in the =lisp/= directory. It
will be automatically created if it doesn't exist.

#+begin_src emacs-lisp
  (unless (file-exists-p swanemacs-lisp-dir)
    (make-directory swanemacs-lisp-dir))
#+end_src

I use the ~:load-path~ keyword from =use-package= to load these
packages.

I should maybe use [[https://github.com/quelpa/quelpa][Quelpa]] in order to manage them from source.

** Server start

From [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][here]]:

#+begin_quote
[...] once an Emacs server is started, you can use a shell command
called =emacsclient= to connect to the Emacs process and tell it to
visit a file. You can then set the EDITOR environment variable to
‘emacsclient’, so that external programs will use the existing Emacs
process for editing.
#+end_quote

On Windows, sometimes running the ~server-start~ command causes the
following error: "=The directory ~/.emacs.d/server is unsafe=". This
code seems to fix the problem (taken from [[https://stackoverflow.com/a/1566618][this Stackoverflow answer]]):

#+begin_src emacs-lisp :tangle no :noweb-ref server-config
  (when (and (>= emacs-major-version 23) (eq system-type 'windows-nt))
    (defun server-ensure-safe-dir (dir)
      "Noop" t))
#+end_src

The server can then be started unless it is already running.

#+begin_src emacs-lisp :tangle no :noweb-ref server-config
  (unless (server-running-p)
    (server-start))
#+end_src

Let's feed these blocks to =use-package= thanks to Noweb:

#+begin_src emacs-lisp :noweb yes
  (use-package server
    :demand t
    :config
    <<server-config>>)
#+end_src

** Keybindings metaconfig

See [[https://github.com/jwiegley/use-package#use-package-chords][the =use-package= documentation about key chords]].

#+begin_src emacs-lisp
  (use-package use-package-chords
    :demand t
    :config (key-chord-mode 1))
#+end_src

* Modules and personal config

Now that Org is ready, we can load the Org files themselves.

I use a primitive system of "modules" to manage my config; every Org
file in the =modules= directory is a module. Every module *should be*
independent.

** List of activated modules

The list of activated modules is stored in a variable called
~swanemacs-enabled-modules~:

I usually enable them all :)

#+begin_src emacs-lisp
  (defvar swanemacs-enabled-modules nil
    "List of enabled modules.")

  (setq swanemacs-enabled-modules
	'(swanemacs-basic
	  swanemacs-dired
	  swanemacs-helm
	  swanemacs-completion
	  swanemacs-projectile
	  swanemacs-git
	  swanemacs-org
	  swanemacs-prog
	  swanemacs-latex
	  swanemacs-web
	  swanemacs-communication
	  swanemacs-gadgets
	  swanemacs-mail-news
	  swanemacs-science
	  swanemacs-markdown
	  swanemacs-finance))
#+end_src

** Preload

Load the Emacs Lisp files from the =preload= directory. Theses files
are loaded *in order*!

#+begin_src emacs-lisp
  (when (file-exists-p swanemacs-preload-dir)
    (mapc 'load (directory-files swanemacs-preload-dir t swanemacs-el-regex)))
#+end_src

** Modules

Now let's load the activated modules:

#+begin_src emacs-lisp
  (mapc (lambda (module)
          (let ((path (expand-file-name (concat (symbol-name module) ".el")
                                        swanemacs-modules-dir)))
            (if (not (file-exists-p path))
                (error "%s doesn't exist!" path)
              (load path))))
        swanemacs-enabled-modules)
#+end_src

** =custom.el=

The customizations are usually loaded last.

#+begin_src emacs-lisp
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* A final message

We stop Emacs from displaying the annoying startup message and show
our own instead.

#+begin_src emacs-lisp
  (fset 'display-startup-echo-area-message 'ignore)
#+end_src

* Local config
#+PROPERTY: header-args :tangle yes

Local Variables:
eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
End:
