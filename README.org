#+TITLE: SwanEmacs
#+AUTHOR: Anthony Le Cigne
#+OPTIONS: num:nil

This is my Emacs configuration. It is:

- Self-installable :: Thanks to John Wiegley's [[https://github.com/jwiegley/use-package][=use-package=]], all
  Emacs packages I use are downloaded automatically when I first start
  Emacs on a new environement.

- Self-documenting :: It is made of [[https://orgmode.org/][Org]] files that can be exported to
  many formats using [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]], including their executable [[https://en.wikipedia.org/wiki/Emacs_Lisp][Emacs Lisp]]
  format. Right now, you might be reading it in an HTML format, like
  on [[https://lecigne.net/notes/emacs/README.html][my website]] or [[https://github.com/alecigne/.emacs.d][on Github]] (Github understands Org markup and render
  it to HTML).

- Modular :: A fancy word to say that I split Org files by
  functionality for clarity (Org mode, Git, etc.). I call these files
  /modules/ and they can be loaded independently.

* Structure

#+begin_export org
,#+begin_export html
<pre class="example">
├── modules/
│   ├── <a href="./modules/swanemacs-basic.html">swanemacs-basic.org</a>
│   ├── <a href="./modules/swanemacs-communication.html">swanemacs-communication.org</a>
│   ├── <a href="./modules/swanemacs-completion.html">swanemacs-completion.org</a>
│   ├── <a href="./modules/swanemacs-dired.html">swanemacs-dired.org</a>
│   ├── <a href="./modules/swanemacs-finance.html">swanemacs-finance.org</a>
│   ├── <a href="./modules/swanemacs-gadgets.html">swanemacs-gadgets.org</a>
│   ├── <a href="./modules/swanemacs-git.html">swanemacs-git.org</a>
│   ├── <a href="./modules/swanemacs-helm.html">swanemacs-helm.org</a>
│   ├── <a href="./modules/swanemacs-latex.html">swanemacs-latex.org</a>
│   ├── <a href="./modules/swanemacs-mail-news.html">swanemacs-mail-news.org</a>
│   ├── <a href="./modules/swanemacs-markdown.html">swanemacs-markdown.org</a>
│   ├── <a href="./modules/swanemacs-org.html">swanemacs-org.org</a>
│   ├── <a href="./modules/swanemacs-prog.html">swanemacs-prog.org</a>
│   ├── <a href="./modules/swanemacs-projectile.html">swanemacs-projectile.org</a>
│   ├── <a href="./modules/swanemacs-science.html">swanemacs-science.org</a>
│   └── <a href="./modules/swanemacs-web.html">swanemacs-web.org</a>
├── preload/
│   ├── <a href="./preload/1-system.html">1-system.org</a>
│   └── <a href="./preload/2-config.html">2-config.org</a>
└── <a href="./init.html">init.org</a>
</pre>
,#+end_export
#+end_export

~init.org~ will create ~early-init.el~ and ~init.el~.

The init file will:

- Initialize [[http://wikemacs.org/wiki/Package.el][=package.el=]], Emacs' built-in package manager

- Use ~package-install~ to install and/or load John Wiegley's
  [[https://github.com/jwiegley/use-package][=use-package=]]

- Use =use-package= to install and/or load Org

- Use Org to tangle and load the modules activated in the
  ~swanemacs-enabled-modules~ variable.

The modules themselves are stored in the =modules= directory in the
form of Org files that load packages related to an Emacs functionality
(Org mode, Dired, etc. - take a look), as previously stated.

* About Noweb

Since I make heavy use of =use-package=, sometimes I have to write
big, top-level =use-package= s-expressions. It is hard to reconcile
this with an Org-based self-documenting configuration, where small
blocks of code should be wrapped in Org syntax.

Here is a deliberately simple example. Let's say I want this form in
=init.el=:

#+BEGIN_SRC emacs-lisp
  (use-package server
    :demand t
    :config
    (when (and (>= emacs-major-version 23) (eq system-type 'windows-nt))
      (defun server-ensure-safe-dir (dir)
        "Noop" t))
    (unless (server-running-p)
      (server-start)))
#+END_SRC

In order to document it, however, I need to split it in multiple Org
code blocks in =init.org=. Here is the source code from =init.org=
achieving this (you can also check it in [[https://raw.githubusercontent.com/alecigne/.emacs.d/master/init.org][the raw Org file]]):

#+BEGIN_EXAMPLE
  On Windows, sometimes running ~server-start~ causes the following
  error: "=The directory ~/.emacs.d/server is unsafe=". This code seems
  to fix the problem (taken from [[https://stackoverflow.com/a/2944197][this Stackoverflow answer]]):

  ,#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref server-config
    (when (and (>= emacs-major-version 23) (eq system-type 'windows-nt))
      (defun server-ensure-safe-dir (dir)
        "Noop" t))
  ,#+END_SRC

  The server can then be started unless it is already running.

  ,#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref server-config
    (unless (server-running-p)
      (server-start))
  ,#+END_SRC

  Let's feed these blocks to ~use-package~ thanks to Noweb:

  ,#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
    (use-package server
      :demand t
      :config
      <<server-config>>)
  ,#+END_SRC
#+END_EXAMPLE

Every individual block is not tangled (~:tangle no~), but has a noweb
reference (~:noweb-ref server-config~, with the value being
~server-config~). In the final Noweb tangled block (~:tangle yes
:noweb yes~), the ~<<server-config>>~ Noweb placeholder will be
replaced with a concatenation of all the code blocks that have
~server-config~ as a value for ~:noweb-ref~. The resulting Emacs Lisp
code will look exactly like the above example.
