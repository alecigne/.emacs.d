#+TITLE: alecigne's Emacs config
#+AUTHOR: Anthony Le Cigne

This is my Emacs config, based on a network of Org files.

* Structure

- =init.org= :

  + Initializes [[http://wikemacs.org/wiki/Package.el][=package.el=]], Emacs' built-in package manager.

  + Uses =package-install= to install and/or load John Wiegley's
    [[https://github.com/jwiegley/use-package][=use-package=]].

  + Uses =use-package= to install and/or load Org.

  + Uses Org to tangle and load every Org file in my config.

- The =modules= directory contains the core config.

- The =personal= directory contains the settings I consider
  idiosyncratic: keybindings, paths, workflow-related settings,
  etc. and above all, modules that will be activated. I separate these
  settings from the modules so other people can use my config with
  their own tweaks.

  The personal settings are separated in two directories; =preload=
  (loaded before everything else) and =postload= (loaded after
  everything else). The preload config typically sets the modules that
  will be activated afterwards.

* Trying the config

Of course, this is by no means an Emacs distribution, like [[http://spacemacs.org/][Spacemacs]]
or [[https://github.com/hlissner/doom-emacs][Doom]], but you can still try it out :)

1. *Backup your Emacs config*:

   #+BEGIN_SRC sh
     mv ~/.emacs.d/ ~/.emacs.d_backup/
   #+END_SRC

2. Clone the repo:

   #+BEGIN_SRC sh
     git clone https://github.com/alecigne/.emacs.d
   #+END_SRC

3. Delete all files in the =./personal/= subdirectories. You can
   launch Emacs at this point; it should only download a few packages
   such as the last version of Org.

4. In =./preload/=, create an Org file that will activate the modules:

   #+BEGIN_SRC org
     ,#+BEGIN_SRC emacs-lisp :tangle yes
       (setq alc-enabled-modules
             '(alc-basic
               ;; alc-dired
               ;; alc-helm
               ;; alc-completion
               ;; alc-projectile
               ;; alc-git
               ;; alc-org
               ;; alc-prog
               ;; alc-latex
               ;; alc-web
               ;; alc-ess
               ;; alc-communication
               ;; alc-gadgets
               ))
     ,#+END_SRC
   #+END_SRC

   Here the =alc-basic= module is activated.

5. Launch Emacs and pray :)

   The packages associated to the modules you activated should be
   automatically downloaded and loaded.
   
6. Tweak the config by adding =.org= files in the =./personal/preload=
   and =./personal/postload/= directories.

   Keep in mind that the =.org= files in the =./personal/=
   subdirectories will be loaded *in order*.

* About Noweb

Since I make heavy use of =use-package=, sometimes I have to write
big, top-level =use-package= s-expressions. It is hard to reconcile
this with an Org-based self-documenting configuration, where small
blocks of code should be wrapped in Org syntax.

Here is a small example from my =init.org=. I want this form in my
=init.el= file:

#+BEGIN_SRC emacs-lisp
  (use-package server
    :demand t
    :config
    (when (and (>= emacs-major-version 23)
               (eq system-type 'windows-nt))
      (defun server-ensure-safe-dir (dir) "Noop" t))
    (unless (server-running-p)
      (server-start)))
#+END_SRC

In order to document it, however, I need to split it in multiple Org
code blocks in my =init.org=. Here is the source code from my
=init.org= achieving this:

#+BEGIN_EXAMPLE
  On Windows, sometimes running =server-start= causes the following error:
  "=The directory ~/.emacs.d/server is unsafe=". This code seems to fix
  the problem (taken from https://stackoverflow.com/a/2944197):

  ,#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref server-config
    (when (and (>= emacs-major-version 23)
               (eq system-type 'windows-nt))
      (defun server-ensure-safe-dir (dir) "Noop" t))
  ,#+END_SRC

  The server can then be started unless it is running.

  ,#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref server-config
    (unless (server-running-p)
      (server-start))
  ,#+END_SRC

  Let's feed these blocks to =use-package= thanks to Noweb:

  ,#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
    (use-package server
      :demand t
      :config
      <<server-config>>)
  ,#+END_SRC
#+END_EXAMPLE

Every individual block is not tangled, but has a noweb reference
(=:noweb-ref server-config=). Then, in the final tangled block, the
=<<server-config>>= noweb placeholder will be replaced with a
concatenation of all the code blocks that have a =server-config=
=:noweb-ref= keyword. The resulting Emacs Lisp code will look exactly
like above.

So if you find a Noweb placeholder in my config, just look at the
Emacs Lisp file to see the result!
