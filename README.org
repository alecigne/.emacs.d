#+TITLE: SwanEmacs - alecigne's Emacs core config
#+AUTHOR: Anthony Le Cigne

This is my Emacs core config. Although suited to my own personal
preferences, it can still be used by somebody else out-of-the-box,
since it is:

- Self-installable - thanks to John Wiegley's [[https://github.com/jwiegley/use-package][=use-package=]]
- Self-documenting - it is based on a network of [[https://orgmode.org/][Org]] files that are
  tangled into Emacs Lisp by [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]]
- Free from idiosyncratic settings - these are stored in an [[https://github.com/alecigne/.emacs-personal.d][external
  repository]] and loaded by the core config.

However, do not expect it to meet the power and quality requirements
of an Emacs distribution ([[http://spacemacs.org/][Spacemacs]], [[https://github.com/hlissner/doom-emacs][Doom]], etc.) :) This is still a
personal config. It is simply designed in a modular way to help
friends who are starting with Emacs and need better default settings.

* Structure

- =init.org= :

  + Initializes [[http://wikemacs.org/wiki/Package.el][=package.el=]], Emacs' built-in package manager.

  + Uses =package-install= to install and/or load John Wiegley's
    [[https://github.com/jwiegley/use-package][=use-package=]].

  + Uses =use-package= to install and/or load Org.

  + Uses Org to tangle and load...

    * ...the "preload" external config where modules are activated

    * ...the modules

    * ..the rest of the external config.

- The =modules= directory contains Org files that load packages
  related to an Emacs functionality (Org mode, Dired, etc. - take a
  look).

- An external config, loaded from =../.emacs-personal.d/= - that is, a
  =.emacs-personal.d/= directory located in the directory that
  contains your =.emacs.d/=. You can put your own config in there -
  see the section about trying the config below.

* Trying the config

1. *Backup your Emacs config*:

   #+BEGIN_SRC sh
     mv ~/.emacs.d/ ~/.emacs.d_backup/
   #+END_SRC

2. Clone the repo:

   #+BEGIN_SRC sh
     git clone https://github.com/alecigne/.emacs.d
   #+END_SRC

3. You should be able to launch Emacs at this point. Since no modules
   have been activated, it should only download a few mandatory
   packages such as the latest version of Org. Emacs will not respond
   during that phase - but it is only done once.

4. Create a =../.emacs-personal.d/= directory containing a =preload=
   directory. The settings in =preload= are loaded *before* the
   modules. Look at [[https://github.com/alecigne/.emacs-personal.d][my external config]] for an example.

   In =./preload/=, create an Org file ending with =.init.org= that
   will activate the modules of your choice:

   #+BEGIN_SRC org
     ,#+BEGIN_SRC emacs-lisp :tangle yes
       (setq swanemacs-enabled-modules '(swanemacs-basic))
     ,#+END_SRC
   #+END_SRC

   Here the =swanemacs-basic= module is activated.

5. Launch Emacs; the packages associated with the modules you
   activated should be automatically downloaded and loaded.
   
6. Tweak the config by adding files ending with =.init.org= in the
   =.emacs-personal.d/= directory. *These files are loaded in order*.

* About Noweb

Since I make heavy use of =use-package=, sometimes I have to write
big, top-level =use-package= s-expressions. It is hard to reconcile
this with an Org-based self-documenting configuration, where small
blocks of code should be wrapped in Org syntax.

Here is a small example from my =init.org=. I want this form in my
=init.el= file:

#+BEGIN_SRC emacs-lisp
  (use-package server
    :demand t
    :config
    (when (and (>= emacs-major-version 23)
               (eq system-type 'windows-nt))
      (defun server-ensure-safe-dir (dir) "Noop" t))
    (unless (server-running-p)
      (server-start)))
#+END_SRC

In order to document it, however, I need to split it in multiple Org
code blocks in my =init.org=. Here is the source code from my
=init.org= achieving this:

#+BEGIN_EXAMPLE
  On Windows, sometimes running =server-start= causes the following error:
  "=The directory ~/.emacs.d/server is unsafe=". This code seems to fix
  the problem (taken from https://stackoverflow.com/a/2944197):

  ,#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref server-config
    (when (and (>= emacs-major-version 23)
               (eq system-type 'windows-nt))
      (defun server-ensure-safe-dir (dir) "Noop" t))
  ,#+END_SRC

  The server can then be started unless it is running.

  ,#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref server-config
    (unless (server-running-p)
      (server-start))
  ,#+END_SRC

  Let's feed these blocks to =use-package= thanks to Noweb:

  ,#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
    (use-package server
      :demand t
      :config
      <<server-config>>)
  ,#+END_SRC
#+END_EXAMPLE

Every individual block is not tangled, but has a noweb reference
(=:noweb-ref server-config=). Then, in the final tangled block, the
=<<server-config>>= noweb placeholder will be replaced with a
concatenation of all the code blocks that have a =server-config=
=:noweb-ref= keyword. The resulting Emacs Lisp code will look exactly
like above.

So if you find a Noweb placeholder in my config, just look at the
Emacs Lisp file to see the result!
