#+TITLE: SwanEmacs
#+AUTHOR: Anthony Le Cigne

This is my Emacs config. It is self-installable (thanks to John
Wiegley's [[https://github.com/jwiegley/use-package][~use-package~]]) and self-documenting. It is made of [[https://orgmode.org/][Org]] files
that can be exported to many formats using [[https://orgmode.org/worg/org-contrib/babel/][Org Babel]], including their
executable [[https://en.wikipedia.org/wiki/Emacs_Lisp][Emacs Lisp]] format. Right now, you might be reading a
non-executable export of my config, in a PDF or a HTML format (like on
[[https://anthony.lecigne.net/emacs/README.html][my website]] or [[https://github.com/alecigne/.emacs.d][on Github]]).

* Structure

#+begin_example
  ├── init.org
  ├── modules
  │   ├── swanemacs-basic.org
  │   ├── swanemacs-communication.org
  │   ├── swanemacs-completion.org
  │   ├── swanemacs-dired.org
  │   ├── swanemacs-finance.org
  │   ├── swanemacs-gadgets.org
  │   ├── swanemacs-git.org
  │   ├── swanemacs-helm.org
  │   ├── swanemacs-latex.org
  │   ├── swanemacs-mail-news.org
  │   ├── swanemacs-markdown.org
  │   ├── swanemacs-org.org
  │   ├── swanemacs-prog.org
  │   ├── swanemacs-projectile.org
  │   ├── swanemacs-science.org
  │   └── swanemacs-web.org
  ├── preload
  │   ├── 1-system.org
  │   └── 2-config.org
  ├── README.org
#+end_example

~init.org~ will...

- Initialize [[http://wikemacs.org/wiki/Package.el][~package.el~]], Emacs' built-in package manager.

- Use ~package-install~ to install and/or load John Wiegley's
  [[https://github.com/jwiegley/use-package][~use-package~]].

- Use ~use-package~ to install and/or load Org.

- Use Org to tangle and load the modules activated in the
  ~swanemacs-enabled-modules~ variable.

The modules themselves are stored in the ~modules~ directory in the
form of Org files that load packages related to an Emacs functionality
(Org mode, Dired, etc. - take a look).

* About Noweb

Since I make heavy use of ~use-package~, sometimes I have to write
big, top-level ~use-package~ s-expressions. It is hard to reconcile
this with an Org-based self-documenting configuration, where small
blocks of code should be wrapped in Org syntax.

Here is a small example from my ~init.org~. I want this form in my
~init.el~ file:

#+BEGIN_SRC emacs-lisp
  (use-package server
    :demand t
    :config
    (when (and (>= emacs-major-version 23)
               (eq system-type 'windows-nt))
      (defun server-ensure-safe-dir (dir) "Noop" t))
    (unless (server-running-p)
      (server-start)))
#+END_SRC

In order to document it, however, I need to split it in multiple Org
code blocks in my ~init.org~. Here is the source code from my
~init.org~ achieving this:

#+BEGIN_EXAMPLE
  On Windows, sometimes running ~server-start~ causes the following error:
  "~The directory ~/.emacs.d/server is unsafe~". This code seems to fix
  the problem (taken from https://stackoverflow.com/a/2944197):

  ,#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref server-config
    (when (and (>= emacs-major-version 23)
               (eq system-type 'windows-nt))
      (defun server-ensure-safe-dir (dir) "Noop" t))
  ,#+END_SRC

  The server can then be started unless it is running.

  ,#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref server-config
    (unless (server-running-p)
      (server-start))
  ,#+END_SRC

  Let's feed these blocks to ~use-package~ thanks to Noweb:

  ,#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
    (use-package server
      :demand t
      :config
      <<server-config>>)
  ,#+END_SRC
#+END_EXAMPLE

Every individual block is not tangled, but has a noweb reference
(~:noweb-ref server-config~). Then, in the final tangled block, the
~<<server-config>>~ noweb placeholder will be replaced with a
concatenation of all the code blocks that have a ~server-config~
~:noweb-ref~ keyword. The resulting Emacs Lisp code will look exactly
like above.

So if you find a Noweb placeholder in my config, just look at the
Emacs Lisp file to see the result!
