#+TITLE: Emacs Helm settings
#+AUTHOR: Anthony Le Cigne

Emacs incremental completion and selection narrowing framework. Read
the [[https://emacs-helm.github.io/helm/][manual]]. A very good tutorial is available [[http://tuhdo.github.io/helm-intro.html][here]] and some code below
might have been pasted from it.

* Table of contents                                            :toc:noexport:
- [[#helm][=helm=]]
  - [[#noweb-form][Noweb form]]
  - [[#noweb-expansion][Noweb expansion]]
- [[#helm-descbinds][=helm-descbinds=]]
- [[#helm-describe-modes][=helm-describe-modes=]]
- [[#helm-projectile][=helm-projectile=]]
- [[#helm-swoop][=helm-swoop=]]
- [[#wrapping-up][Wrapping up]]

* =helm=

** Noweb form

#+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export
  (use-package helm
    :ensure t
    :delight
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-mini)
           ("M-y" . helm-show-kill-ring)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action)
           ("C-i" . helm-execute-persistent-action)
           ("C-z" . helm-select-action))
    :config
    <<helm-config>>)
#+END_SRC

** Noweb expansion

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-config
  (setq helm-split-window-in-side-p t
        helm-move-to-line-cycle-in-source t
        helm-ff-search-library-in-sexp t
        helm-scroll-amount 8
        helm-ff-file-name-history-use-recentf t
        helm-M-x-fuzzy-match t)

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t)

  (setq helm-follow-mode-persistent t)
#+END_SRC

I want =helm= everywhere. The =helm-mode= function is what I need:

#+BEGIN_QUOTE
All functions in Emacs that use ‘completing-read’ or ‘read-file-name’
and friends will use helm interface when this mode is turned on.
However you can modify this behavior for functions of your choice with
‘helm-completing-read-handlers-alist’.

Called with a positive arg, turn on unconditionally, with a negative
arg turn off.  You can turn it on with ‘helm-mode’.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref helm-config
  (helm-mode 1)
#+END_SRC

* =helm-descbinds=

[[https://github.com/emacs-helm/helm-descbinds][A =helm= frontend for =describe-bindings=]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-descbinds
    :ensure t
    :after helm
    :config
    (helm-descbinds-mode)
    (setq-default helm-descbinds-window-style 'split-window))
#+END_SRC

* =helm-describe-modes=

[[https://github.com/emacs-helm/helm-describe-modes][Major and minor mode info with Helm]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-describe-modes
    :ensure t
    :after helm
    :bind ([remap describe-mode] . helm-describe-modes))
#+END_SRC

* =helm-projectile=

[[https://github.com/bbatsov/helm-projectile][Helm UI for Projectile]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-projectile
    :ensure t
    :after projectile
    :config
    (helm-projectile-on))
#+END_SRC

* =helm-swoop=

Config taken [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#helm-plugins][here]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-swoop
    :ensure t
    ;; :bind ([remap isearch-forward] . helm-swoop)
    :config
    (setq-default helm-swoop-move-to-line-cycle nil
                  helm-swoop-speed-or-color t
                  helm-swoop-split-direction 'split-window-vertically)
    (set-face-attribute 'helm-swoop-target-word-face nil
                        :background 'unspecified
                        :foreground 'unspecified
                        :inherit 'isearch))
#+END_SRC

* Wrapping up

#+BEGIN_SRC emacs-lisp :tangle yes
  (provide 'alc-helm)
#+END_SRC
