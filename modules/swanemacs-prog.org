#+TITLE: SwanEmacs programming settings
#+AUTHOR: Anthony Le Cigne

* Table of contents                                            :toc:noexport:
- [[#uml][UML]]
- [[#lisp][Lisp]]
  - [[#all-lisps][All Lisps]]
  - [[#common-lisp][Common Lisp]]
  - [[#emacs-lisp][Emacs Lisp]]
  - [[#scheme][Scheme]]
- [[#python][Python]]
- [[#yaml][YAML]]
- [[#wrapping-up][Wrapping up]]

* UML

#+begin_src emacs-lisp :tangle yes
  (use-package plantuml-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (setq org-plantuml-jar-path (expand-file-name "bin/plantuml.jar"
                                                  swanemacs-root-dir)))
#+end_src

* Lisp

** All Lisps

#+BEGIN_SRC emacs-lisp :tangle yes
  (delight '((lisp-mode "λ" :major)
             (lisp-interaction-mode "λ" :major)
             (emacs-lisp-mode "el" :major)))

#+END_SRC

** Common Lisp

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package slime
    :config
    (when (equal swanemacs-current-system "laptop-linux")
      (setq slime-contribs '(slime-fancy)
            slime-protocol-version 'ignore)
      (setq inferior-lisp-program "sbcl"))

    (defun swanemacs-swank-listening-p ()
      (ignore-errors
        (let ((p (open-network-stream "SLIME Lisp Connection Test" nil "localhost" 4005)))
          (when p
            (delete-process p)
            t))))

    (defun swanemacs-swank-autoconnect (&rest args)
      (if (and (not (slime-connected-p))
               (swanemacs-swank-listening-p))
          (ignore-errors (slime-connect "localhost" 4005))))

    (swanemacs-swank-autoconnect))
#+END_SRC

** Emacs Lisp
** Scheme

http://www.nongnu.org/geiser/

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package geiser)
#+END_SRC

* Python

You need to install Python on your system first, of course, but also
[[https://github.com/davidhalter/jedi][=jedi=]] for autocompletion and static analysis.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elpy
    :init
    (with-eval-after-load 'python (elpy-enable))
    :config
    (setq elpy-rpc-python-command "python3"
          python-shell-interpreter "python3"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pyvenv)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-jedi
    ;; :after company
    :init
    (defun swanemacs-prog-add-company-jedi ()
      (add-to-list 'company-backends 'company-jedi))

    (add-hook 'python-mode-hook 'swanemacs-prog-add-company-jedi)
    (add-hook 'python-mode-hook 'jedi:setup)
    :config
    (setq jedi:complete-on-dot t))
#+END_SRC

* YAML

#+begin_src emacs-lisp :tangle yes
  (use-package yaml-mode
    :ensure t
    :mode ("\\.ya?ml\\'" . yaml-mode))
#+end_src

* Wrapping up

#+BEGIN_SRC emacs-lisp :tangle yes
  (provide 'swanemacs-prog)
#+END_SRC
