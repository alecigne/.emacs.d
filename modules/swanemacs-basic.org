#+TITLE: SwanEmacs basic settings
#+AUTHOR: Anthony Le Cigne

Basics settings, mainly related to basic, vanilla variables and
modes. There are still a few external packages that I consider
important for a basic config.

* Table of contents                                            :toc:noexport:
- [[#user-interface][User interface]]
  - [[#themes][Themes]]
  - [[#modeline][Modeline]]
  - [[#messages][Messages]]
  - [[#cursor][Cursor]]
  - [[#window][Window]]
  - [[#fonts][Fonts]]
- [[#interaction][Interaction]]
  - [[#commands][Commands]]
  - [[#-yes-or-no--questions][« Yes or no » questions]]
  - [[#tooltips][Tooltips]]
  - [[#helm][=helm=]]
  - [[#which-key][Which-key]]
- [[#windows-and-buffers][Windows and buffers]]
  - [[#useful-commands][Useful commands]]
  - [[#general][General]]
  - [[#ibuffer][=ibuffer=]]
  - [[#popwin][Popwin]]
- [[#navigation][Navigation]]
  - [[#searching][Searching]]
- [[#editing][Editing]]
  - [[#smartparens][=smartparens=]]
  - [[#useful-commands-1][Useful commands]]
  - [[#encoding][Encoding]]
  - [[#completion][Completion]]
  - [[#undoing-things][Undoing things]]
  - [[#misc][Misc]]
- [[#saving][Saving]]
  - [[#backups][Backups]]
- [[#programming][Programming]]
- [[#basic-fileproject-management][Basic file/project management]]
  - [[#projectile][=projectile=]]
  - [[#treemacs][Treemacs]]
  - [[#recentf][Recentf]]
  - [[#dired][Dired]]
  - [[#backups-1][Backups]]
  - [[#recentf-1][Recentf]]
- [[#help][Help]]
  - [[#general-1][General]]
  - [[#company-quickhelp][=company-quickhelp=]]
- [[#wrapping-up][Wrapping up]]

* User interface

What appears in the UI, and how it looks.

** Themes

Install themes:

- [[https://github.com/waymondo/apropospriate-theme][=apropospriate=]], light and dark themes
- =monokai=, a dark theme (used by default)
- =doom-themes=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package apropospriate-theme)

  (use-package monokai-theme)

  (use-package doom-themes)

  (load-theme 'doom-one t)
  (doom-themes-org-config)
  (doom-themes-treemacs-config)
#+END_SRC

To switch between themes according to sunrise/sunset, install
[[https://github.com/guidoschmidt/circadian.el][=circadian.el=]].

** Modeline

*** Content

A few ressources for understanding modeline configuration: 

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Data.html#Mode-Line-Data][The Data Structure of the Mode Line]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/_0025_002dConstructs.html#g_t_0025_002dConstructs][%-Constructs in the Mode Line]]
- A [[http://www.lunaryorn.com/2014/07/26/make-your-emacs-mode-line-more-useful.html][tutorial]]
- [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Props-and-Strings.html][Text Properties in Strings]]
- [[http://amitp.blogspot.com/2011/08/emacs-custom-mode-line.html][A mode line config]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default mode-line-buffer-identification
                '("%Z %b %1*%1+ %I"))

  (setq-default mode-line-position
                '((-3 "%p")
                  " %4l:"
                  (:eval (propertize "%3c" 'face
                                     (if (>= (current-column) 80)
                                         '(:foreground "red"))))))

  (setq-default mode-line-modes
                '("%["
                  mode-name
                  (:eval (format-mode-line minor-mode-alist))
                  "%n"
                  "%]"))

  (setq mode-line-separator " | ")

  ;; Wrapping up
  (setq-default mode-line-format
                '(" "
                  mode-line-buffer-identification
                  mode-line-separator
                  mode-line-position
                  mode-line-separator
                  mode-line-modes
                  mode-line-separator
                  (global-mode-string global-mode-string)
                  ))
#+END_SRC

*** Modeline names for vanilla modes

[[https://elpa.gnu.org/packages/delight.html][=delight=]] is used for changing major and minor modes names in the
modeline. It is already installed and loaded in =init.org= since
=use-package= needs it.

Newly installed packages will be diminished with =use-package=;
vanilla modes will be customized here.

#+BEGIN_SRC emacs-lisp :tangle yes
  (delight '(;; Major modes
             (text-mode "txt" :major)
             ;; Minor modes
             (eldoc-mode nil t)
             (auto-fill-function nil t)))

  (use-package autorevert
    :delight auto-revert-mode)
#+END_SRC

** Messages

Get rid of unwanted messages.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-startup-screen t
        initial-scratch-message nil)
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default cursor-type 'bar)
  (global-hl-line-mode 1)
  (blink-cursor-mode 0)
#+END_SRC

** Window

Minimalitic window settings: no menu, toolbar, scroll bars or [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fringes.html][fringes]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (when (display-graphic-p)
    (scroll-bar-mode 0)
    (fringe-mode '(2 . 0)))

  (menu-bar-mode 0)
  (tool-bar-mode 0)
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun swanemacs-basic-set-font (font height)
    "Use FONT if installed, with height HEIGHT."
    (when (member font (font-family-list))
      (set-face-attribute 'default nil :font font :height height)))

  (cond ((eq system-type 'windows-nt)
         (swanemacs-basic-set-font "Consolas" 100))
        ;; Source Code Pro doesn't look good (for me) on Windows
        ((eq system-type 'gnu/linux)
         (swanemacs-basic-set-font "Source Code Pro" 100)))
#+END_SRC

* Interaction

How to talk to Emacs and how it talks back.

** Commands

Enable all commands by default.

#+begin_src emacs-lisp :tangle yes
  (setq disabled-command-function nil)
#+end_src

** « Yes or no » questions

http://www.emacswiki.org/emacs/YesOrNoP

#+BEGIN_SRC emacs-lisp :tangle yes
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Tooltips

From the [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Tooltips.html][Emacs manual]]:

#+BEGIN_QUOTE
Tooltips are small windows that display text information at the
current mouse position. They activate when there is a pause in mouse
movement over some significant piece of text in a window, or the mode
line, or some other part of the Emacs frame such as a tool bar button
or menu item.

You can toggle the use of tooltips with the command =M-x
tooltip-mode=. When Tooltip mode is disabled, the help text is
displayed in the echo area instead. To control the use of tooltips at
startup, customize the variable =tooltip-mode=.

The variables =tooltip-delay= specifies how long Emacs should wait
before displaying a tooltip. For additional customization options for
displaying tooltips, use =M-x customize-group RET tooltip RET=.

If Emacs is built with GTK+ support, it displays tooltips via GTK+,
using the default appearance of GTK+ tooltips. To disable this, change
the variable =x-gtk-use-system-tooltips= to =nil=. If you do this, or
if Emacs is built without GTK+ support, most attributes of the tooltip
text are specified by the tooltip face, and by X resources (see X
Resources).
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (tooltip-mode 0)
  (setq tooltip-delay 0.5)
#+END_SRC

** =helm=

Check the [[file:swanemacs-helm.org][=helm= module]].

** Which-key

[[https://github.com/justbur/emacs-which-key][Emacs package that displays available keybindings in popup]].

#+BEGIN_SRC emacs-lisp :tangle yes :noweb yes
  (use-package which-key
    :defer 1
    :delight
    :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 1.0
          which-key-max-display-columns nil))
#+END_SRC

* Windows and buffers

** Useful commands

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun swanemacs-basic-kill-other-buffers ()
    "Kill all normal buffers but the current one."
    (interactive)
    (dolist (buffer (buffer-list))
      (unless (or (eql buffer (current-buffer))
                  (not (buffer-file-name buffer)))
        (kill-buffer buffer))))

  (defun swanemacs-basic-kill-other-buffer-and-window (count)
    "Switch to the other window, and kill it, with the associated buffer."
    (interactive "p")
    (other-window count)
    (kill-buffer-and-window))

  (global-set-key (kbd "M-<f6>") 'swanemacs-basic-kill-other-buffer-and-window)

  (defun swanemacs-basic-kill-buffer-in-other-window ()
    "Kill the buffer in the other window."
    (interactive)
    (other-window 1)
    (kill-this-buffer)
    (other-window 1))

  (global-set-key (kbd "<f6>") 'swanemacs-basic-kill-buffer-in-other-window)

  (defun swanemacs-basic-kill-other-window ()
    "Kill the other window but don't kill its buffer."
    (interactive)
    (other-window 1)
    (delete-window))

  (global-set-key (kbd "C-<f6>") 'swanemacs-basic-kill-other-window)

  (defun swanemacs-basic-switch-to-previous-buffer ()
    "Switch to the most recently selected buffer other than current
  buffer, unless the previous buffer is visible."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) nil)))

  (key-chord-define-global "jh" 'swanemacs-basic-switch-to-previous-buffer)

  (global-set-key (kbd "C-S-k") 'kill-whole-line)
  (global-set-key (kbd "<f5>") 'kill-this-buffer)
  (key-chord-define-global ";k" 'kill-this-buffer)
  (global-set-key (kbd "M-<f5>") 'kill-buffer-and-window)
  (define-key global-map (kbd "C-c ù") 'ibuffer)
  (global-set-key (kbd "C-<f5>") 'delete-window)
  (key-chord-define-global ";o" 'other-window)
  (key-chord-define-global ";à" 'delete-window)
  (key-chord-define-global ";&" 'delete-other-windows)
  (key-chord-define-global ";é" 'split-window-below)
  (key-chord-define-global ";\"" 'split-window-right)

#+END_SRC

** General

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq uniquify-buffer-name-style 'post-forward)

  (defadvice quit-window (before quit-window-always-kill)
    "When running `quit-window', always kill the buffer."
    (ad-set-arg 0 t))

  (ad-activate 'quit-window)
#+END_SRC

Saving sessions.

#+BEGIN_SRC emacs-lisp :tangle yes
  (desktop-save-mode 0)
  (setq desktop-save 'ask)
#+END_SRC

** =ibuffer=

[[https://www.emacswiki.org/emacs/IbufferMode][=ibuffer=]]...

#+BEGIN_QUOTE
[...] lets you operate on buffers much in the same manner as Dired.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer
    :ensure nil
    :config
    (setq ibuffer-default-sorting-mode 'major-mode)
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("Dired"
                    (mode . dired-mode))
                   ("Shell"
                    (or (mode . eshell-mode)
                        (mode . shell-mode)))
                   ("Org" ;; all org-related buffers
                    (mode . org-mode)
                    )
                   ("Markdown"
                    (mode . markdown-mode))
                   ("TeX"
                    (mode . latex-mode))              
                   ("Text"
                    (mode . text-mode))
                   ("R"
                    (mode . r-mode))
                   ("PDF"
                    (name . ".*\.pdf$"))
                   ("Data files"
                    (name . ".*\.csv$"))
                   ("Common Lisp"
                    (or (mode . lisp-mode)
                        (mode . slime-repl-mode)
                        ))
                   ("Emacs Lisp"
                    (or (mode . inferior-emacs-lisp-mode)
                        (mode . lisp-interaction-mode)
                        (mode . emacs-lisp-mode)))
                   ("Python"
                    (mode . python-mode))
                   ("R"
                    (or (mode . inferior-ess-mode)
                        (mode . ess-mode)))
                   ("Calc"
                    (mode . calc-mode))
                   ("Web"
                    (mode . eww-mode))
                   ("Planning"
                    (or
                     (name . "^\\*Calendar\\*$")
                     (name . "^\\*Org Agenda\\*$")))
                   ("Jabber"
                    (or
                     (mode . jabber-roster-mode)
                     (mode . jabber-chat-mode)))
                   ("IRC"
                    (mode . erc-mode))
                   ("ELPA"
                    (mode . package-menu-mode))
                   ))))

    (add-hook 'ibuffer-mode-hook
              (lambda ()
                ;;(ibuffer-auto-mode 1)   ;auto update the buffer-list
                (ibuffer-switch-to-saved-filter-groups "default")
                ))

    ;; Don't show (filter) groups that are empty.
    (setq ibuffer-show-empty-filter-groups nil))
#+END_SRC

** Popwin

[[https://github.com/m2ym/popwin-el][Github page]]. I should have a look at [[https://github.com/wasamasa/shackle][Shackle]] too.

#+BEGIN_QUOTE
=popwin= is a popup window manager for Emacs which makes you free from
the hell of annoying buffers [...]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package popwin
    :defer 1				; probably not needed right away
    :config (popwin-mode 1))
#+END_SRC

* Navigation

** Searching

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq isearch-allow-scroll t)
#+END_SRC

* Editing

What happens right around the cursor.

** =smartparens=

#+begin_src emacs-lisp :tangle yes
  (use-package smartparens
    :delight
    :config
    (require 'smartparens-config)
    (smartparens-global-mode))
#+end_src

** Useful commands

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun swanemacs-basic-eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))

  (global-set-key (kbd "C-c e") 'swanemacs-basic-eval-and-replace)

  (defun swanemacs-basic-unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single
  logical line. This is useful, e.g., for use with
  `visual-line-mode'."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))
#+END_SRC

Duplicate a line - taken from [[https://stackoverflow.com/a/998472][this SO answer]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun swanemacs-basic-duplicate-line (arg)
    "Duplicate current line, leaving point in lower line."
    (interactive "*p")
    (setq buffer-undo-list (cons (point) buffer-undo-list)) ; save the point for undo
    ;; local variables for start and end of line
    (let ((bol (save-excursion (beginning-of-line) (point)))
          eol)
      (save-excursion
        ;; don't use forward-line for this, because you would have
        ;; to check whether you are at the end of the buffer
        (end-of-line)
        (setq eol (point))
        ;; store the line and disable the recording of undo information
        (let ((line (buffer-substring bol eol))
              (buffer-undo-list t)
              (count arg))
          ;; insert the line arg times
          (while (> count 0)
            (newline)         ;; because there is no newline in 'line'
            (insert line)
            (setq count (1- count))))
        ;; create the undo information
        (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))) ; end-of-let
    ;; put the point in the lowest line and return
    (next-line arg))

  (global-set-key (kbd "C-c d") 'swanemacs-basic-duplicate-line)
#+END_SRC

** Encoding

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq system-time-locale "fr_FR.UTF-8"
        ;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
        utf-translate-cjk-mode nil
        locale-coding-system 'utf-8
        ;; Save clipboard strings into kill ring before replacing them. This
        ;; saves you the burden of losing data because you killed something in
        ;; Emacs before pasting it.
        save-interprogram-paste-before-kill t)

  (set-language-environment "UTF-8")
  (set-keyboard-coding-system 'utf-8-mac) ; For old Carbon emacs on OS X only
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)

  (unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8))

  (prefer-coding-system 'utf-8)
#+END_SRC

** Completion

See the [[file:swanemacs-completion.org][=swanemacs-completion=]] module.

** Undoing things

Here is a [[https://www.emacswiki.org/emacs/UndoTree][presentation]] of =undo-tree= and an [[https://i2.wp.com/pragmaticemacs.com/wp-content/uploads/2015/06/wpid-undo-tree1.gif][animation]] of it in action
(from [[http://pragmaticemacs.com/][Pragmatic Emacs]]).

Use =C-x u= to call =undo-tree-visualize=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-tree
    :demand
    :delight
    :config
    (global-undo-tree-mode))
#+END_SRC

** Misc

#+BEGIN_SRC emacs-lisp :tangle yes
  (show-paren-mode 1)
  (put 'upcase-region 'disabled nil)

  (add-hook 'text-mode-hook
            (lambda ()
              (turn-on-auto-fill)
              (setq default-justification 'left)
              (setq fill-column 70)))
#+END_SRC

* Saving

How to not lose stuff and keep track of it.

** Backups

See [[http://stackoverflow.com/a/151946/4288408][this link]] and [[http://stackoverflow.com/a/18330742/4288408][this link]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-by-copying t       ; don't clobber symlinks
        delete-old-versions t     ; delete excess backup files silently
        kept-new-versions 6       ; newest versions to keep when a new
                                  ; numbered backup is made
        kept-old-versions 2       ; oldest versions to keep when a new
                                  ; numbered backup is made
        version-control t)        ; version numbers for backup files
#+END_SRC

* Programming

Check the [[file:swanemacs-prog.org][=swanemacs-prog=]] module.

* Basic file/project management

Managing files or projects. Check also:

** =projectile=

Check the [[file:swanemacs-projectile.org][=swanemacs-projectile= module]].

** Treemacs

The [[https://github.com/Alexander-Miller/treemacs][Treemacs]] file explorer.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package treemacs
    :defer t
    :config
    (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay   0.5
          treemacs-file-event-delay           5000
          treemacs-file-follow-delay          0.2
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                2
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      nil
          treemacs-no-png-images              nil
          treemacs-project-follow-cleanup     nil
          treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-space-between-root-nodes   t
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      35)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)

    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'extended))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    :bind
    (:map global-map
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile)
#+END_SRC

** Recentf

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package recentf
    :config
    (setq recentf-max-saved-items 50))
#+END_SRC

** Dired

Check the [[file:swanemacs-dired.org][=swanemacs-dired module=]].

** Backups

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-directory-alist `(("." . ,swanemacs-backup-dir)))
#+END_SRC

** Recentf

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; One recentf file for every system I work on. This is not perfect
  ;; but better than having non-existent files from other systems in my
  ;; recentf list.
  (setq recentf-save-file (locate-user-emacs-file
                           (concat "recentf/recentf-" swanemacs-current-system)))
#+END_SRC

* Help

** General

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-h C-f") 'find-function)
  (global-set-key (kbd "C-h C-v") 'find-variable)
#+END_SRC

** =company-quickhelp=

See this [[file:swanemacs-company.org::*=company-quickhelp=][section]] in the =swanemacs-company= module.

* Wrapping up

Declare =swanemacs-basic= as a feature.

#+BEGIN_SRC emacs-lisp :tangle yes
  (provide 'swanemacs-basic)
#+END_SRC

Use =with-eval-after-load= in your personal config in case the
=swanemacs-basic= module is not activated. An example:

#+BEGIN_SRC emacs-lisp :tangle no
  (with-eval-after-load "swanemacs-basic"
    (global-set-key (kbd "C-c d") 'swanemacs-basic-duplicate-line))
#+END_SRC
