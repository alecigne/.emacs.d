#+TITLE: Personal settings - postload
#+AUTHOR: Anthony Le Cigne

Postload personal settings. This is where the vast majority of
personal settings should go - especially settings that override the
modules, if necessary.

* Table of contents                                            :toc:noexport:
- [[#basic-settings][Basic settings]]
- [[#backups][Backups]]
- [[#recentf][Recentf]]
- [[#helm][=helm=]]
- [[#org][=org=]]
  - [[#keybindings][Keybindings]]
  - [[#document-structure][Document structure]]
  - [[#keywords][keywords]]
  - [[#capture-templates][Capture templates]]
  - [[#agenda-views][Agenda views]]
  - [[#exporting][Exporting]]
  - [[#org-publish][Org publish]]
  - [[#custom-functions][Custom functions]]
  - [[#org-crypt][=org-crypt=]]
  - [[#org-pomodoro][=org-pomodoro=]]
  - [[#org-tree-slide][=org-tree-slide=]]
- [[#lisp][Lisp]]
- [[#ess][ESS]]
- [[#communication][Communication]]
  - [[#erc][ERC]]
- [[#mail-and-news][Mail and News]]
  - [[#elfeed][Elfeed]]
- [[#gadgets][Gadgets]]

* Basic settings

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-S-k") 'kill-whole-line)
  (global-set-key (kbd "<f5>") 'kill-this-buffer)
  (key-chord-define-global ";k" 'kill-this-buffer)
  (global-set-key (kbd "M-<f5>") 'kill-buffer-and-window)
  (define-key global-map (kbd "C-c ù") 'ibuffer)
  (global-set-key (kbd "C-<f5>") 'delete-window)
  (key-chord-define-global ";o" 'other-window)
  (key-chord-define-global ";à" 'delete-window)
  (key-chord-define-global ";&" 'delete-other-windows)
  (key-chord-define-global ";é" 'split-window-below)
  (key-chord-define-global ";\"" 'split-window-right)

  (with-eval-after-load "swanemacs-basic"
    (global-set-key (kbd "C-c d") 'swanemacs-basic-duplicate-line)
    (global-set-key (kbd "C-c e") 'swanemacs-basic-eval-and-replace)
    (global-set-key (kbd "<f6>") 'swanemacs-basic-kill-buffer-in-other-window)
    (global-set-key (kbd "M-<f6>") 'swanemacs-basic-kill-other-buffer-and-window)
    (global-set-key (kbd "C-<f6>") 'swanemacs-basic-kill-other-window)
    (key-chord-define-global "jh" 'swanemacs-basic-switch-to-previous-buffer))
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-directory-alist `(("." . ,alc-backup-directory)))
#+END_SRC

* Recentf

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; One recentf file for every system I work on. This is not perfect
  ;; but better than having non-existent files from other systems in my
  ;; recentf list.
  (setq recentf-save-file (locate-user-emacs-file
                           (concat "recentf/recentf-" alc-current-system)))
#+END_SRC

* =helm=
  
#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load 'swanemacs-helm
    (key-chord-define-global ";b" 'helm-mini))
#+END_SRC

* =org=

** Keybindings

#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c s") 'helm-org-in-buffer-headings)
    (global-set-key (kbd "<f7>") 'org-agenda)
    (define-key org-mode-map (kbd "C-c C-x D") 'alc-org-insert-drawer-note)
    (define-key org-mode-map (kbd "C-c C") 'alc-org-insert-cookie-end-of-heading))
#+END_SRC

** Document structure

*** Structure editing

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-M-RET-may-split-line t)
#+END_SRC

*** Drawers

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun alc-org-insert-drawer-note ()
    (interactive)
    (org-insert-drawer nil "NOTES"))
#+END_SRC

** Todo keywords
:PROPERTIES:
:CUSTOM_ID: todokw
:END:

Keywords for tasks:

- =TODO=: the task has yet to be started.
- =DOING=: the task has been started, but it's still not DONE.
- =WAITING=: the task has been started, but it is waiting for something.
- =HOLD=: the task is on hold.
- =TODO?=: I don't know if I will have to even start the task.
- =DONE=: the task is done.
- =CANCELED=: the task was not done but don't require action anymore.

Keywords for projects:

- =TOCOMPLETE=: like =TODO=, for a project.
- =COMPLETING=: like =DOING=, for a project.
- =TOCOMPLETE?=: like =TODO?=, for a project.
- =COMPLETED=: like =DONE=, for a project.
- =ABORTED=: like =CANCELED=, for a project.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
        '((sequence "TODO(t!)"
                    "DOING(D!)"
                    "WAITING(w@/!)"
                    "HOLD(h@/!)"
                    "TODO?(m!)"
                    "|"
                    "DONE(d!)"
                    "CANCELED(x@)")
          (sequence "TOCOMPLETE(T!)"
                    "COMPLETING(C!)"
                    "TOCOMPLETE?(M!)"
                    "|"
                    "COMPLETED(c!)"
                    "ABORTED(X@)")))
#+END_SRC

Faces:

#+BEGIN_SRC emacs-lisp :tangle yes
  (defface alc-org-todo-kwd
    '((t (:weight bold :foreground "red")))
    "Face used to display tasks yet to be worked on.")

  (defface alc-org-in-progress-kwd
    '((t (:weight bold :foreground "orange")))
    "Face used to display tasks in progress.")

  (defface alc-org-someday-kwd
    '((t (:weight bold :foreground "dark red")))
    "Face used to display tasks that might be done someday.")

  (defface alc-org-done-kwd
    '((t (:weight bold :foreground "forest green")))
    "Face used to display org state DONE.")

  (setq org-todo-keyword-faces
        '(("TODO" . alc-org-todo-kwd)
          ("TOCOMPLETE" . alc-org-todo-kwd)
          ("TODO?" . alc-org-someday-kwd)
          ("TOCOMPLETE?" . alc-org-someday-kwd)
          ("DOING" . alc-org-in-progress-kwd)
          ("COMPLETING" . alc-org-in-progress-kwd)
          ("WAITING" . alc-org-in-progress-kwd)
          ("HOLD" . alc-org-in-progress-kwd)
          ("DONE" . alc-org-done-kwd)
          ("COMPLETED" . alc-org-done-kwd)
          ("CANCELED" . alc-org-done-kwd)
          ("ABORTED" . alc-org-done-kwd)))
#+END_SRC

*** Breaking tasks down into subtasks

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-provide-todo-statistics '("TODO" "DOING" "WAITING" "TODO?"))
  (setq org-hierarchical-todo-statistics nil)
#+END_SRC

** Capture templates

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
        '(;; Tâches
          ("t" "Nouvelle tâche"
           entry
           (file+olp alc-org-todo-file "Todo" "Inbox")
           "* TODO %?"
           :prepend t :kill-buffer t)
          ))
#+END_SRC

** Agenda views

*** Agenda files

 #+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-agenda-files
         (delq nil
               (mapcar (lambda (x) (when (file-exists-p x) x))
                       (list alc-org-todo-file alc-org-entourage-file))))
 #+END_SRC

*** Built-in

 #+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-agenda-include-diary nil
         org-agenda-todo-ignore-with-date nil
         org-agenda-skip-scheduled-if-done nil
         org-agenda-skip-deadline-if-done nil
         org-agenda-sorting-strategy '((agenda habit-down time-up category-keep priority-down)
                                       (todo priority-down category-keep)
                                       (tags priority-down category-keep)
                                       (search category-keep))
         org-agenda-start-with-follow-mode nil
         org-agenda-format-date "\n%Y-%m-%d %a\n")

   (defun alc-org-place-agenda-tags ()
     "Put the agenda tags by the right border of the agenda window."
     (setq org-agenda-tags-column (- 4 (window-width)))
     (org-agenda-align-tags))

   (add-hook 'org-finalize-agenda-hook 'alc-org-place-agenda-tags)
 #+END_SRC

*** Custom agenda views

cf. https://github.com/fniessen/emacs-leuven

 #+BEGIN_SRC emacs-lisp :tangle yes
   (defun alc-org-add-option (view option)
     (list (car view)
           (cadr view)
           (cons option (nth 2 view))))

   (setq org-agenda-custom-commands nil)

   (defconst alc-org-completed-date-regexp
     (concat "\\("
             "CLOSED: \\[%Y-%m-%d"
             "\\|"
             "- State \"\\(DONE\\|CANCELED\\)\" * from .* \\[%Y-%m-%d"
             "\\|"
             "- State .* ->  *\"\\(DONE\\|CANCELED\\)\" * \\[%Y-%m-%d"
             "\\) ")
     "Matches any completion time stamp.")

   ;; Simple views

   ;; Events today
   (setq alc-org-acc-events-today
         '(agenda ""
                  ((org-agenda-overriding-header "Events today")
                   (org-agenda-entry-types '(:timestamp :sexp))
                   (org-agenda-span 'day))))

   ;; Events this week
   (setq alc-org-acc-events-week
         '(agenda ""
                  ((org-agenda-overriding-header "Events this week")
                   (org-agenda-entry-types '(:timestamp :sexp))
                   (org-agenda-span 'week))))

   ;; Events this month
   (setq alc-org-acc-events-month
         '(agenda ""
                  ((org-agenda-overriding-header "Events this month")
                   (org-agenda-entry-types '(:timestamp :sexp))
                   (org-agenda-span 'month))))

   ;; Deadlines
   (setq alc-org-acc-deadlines
         '(agenda ""
                  ((org-agenda-overriding-header "Deadlines")
                   (org-agenda-span 'day)
                   (org-agenda-entry-types '(:deadline))
                   (org-deadline-warning-days 365)
                   (org-agenda-time-grid nil)
                   (org-agenda-sorting-strategy '(deadline-up)))))

   ;; Scheduled today
   (setq alc-org-acc-scheduled-today
         '(agenda ""
                  ((org-agenda-overriding-header "Scheduled today")
                   (org-agenda-entry-types '(:scheduled))
                   (org-agenda-span 'day)
                   (org-agenda-sorting-strategy
                    '(priority-down time-down))
                   (org-agenda-start-on-weekday nil)
                   (org-agenda-time-grid nil))))

   ;; Scheduled this month
   (setq alc-org-acc-scheduled-fortnight
         '(agenda ""
                  ((org-agenda-overriding-header "Scheduled these next 2 weeks")
                   (org-agenda-entry-types '(:scheduled))
                   (org-agenda-span 14)
                   (org-agenda-skip-function
                    (lambda ()
                      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
                        (if (member "ménage" (org-get-tags-at))
                            subtree-end
                          nil))))
                   (org-agenda-sorting-strategy
                    '(priority-down time-down))
                   (org-agenda-start-on-weekday nil)
                   (org-agenda-time-grid nil))))

   ;; Waiting
   (setq alc-org-acc-waiting
         '(todo "WAITING"
                ((org-agenda-overriding-header "Waiting for something\n"))))

   ;; Cleaning tasks today
   (setq alc-org-acc-cleaning-today
         '(agenda ""
                  ((org-agenda-overriding-header "Cleaning today")
                   (org-agenda-entry-types '(:scheduled))
                   (org-agenda-span 'day)
                   (org-agenda-skip-function
                    'alc-org-acc-cleaning-today-filter)
                   (org-agenda-sorting-strategy
                    '(priority-down time-down))
                   (org-agenda-start-on-weekday nil)
                   (org-agenda-time-grid nil)
                   (org-agenda-format-date ""))))

   (defun alc-org-acc-cleaning-today-filter ()
     (let ((subtree-end (save-excursion (org-end-of-subtree t))))
       (if (member "ménage" (org-get-tags-at))
           nil		; do no skip
         subtree-end)))	; skip

   ;; High priority
   (setq alc-org-acc-high-priority
         '(tags-todo "PRIORITY={A}"
                     ((org-agenda-overriding-header "Important\n"))))

   ;; Medium priority
   (setq alc-org-acc-medium-priority
         '(tags-todo "PRIORITY={B}"
                     ((org-agenda-overriding-header "Somewhat important\n")
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'notregexp "\\=.*\\[#B\\]"
                                                  'timestamp)))))

   ;; Low priority
   (setq alc-org-acc-low-priority
         '(tags-todo "PRIORITY={C}"
                     ((org-agenda-overriding-header "Not important\n"))))

   ;; No priority
   (setq alc-org-acc-no-priority
         '(todo ""
                ((org-agenda-overriding-header "No priority\n")
                 (org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'regexp "\\=.*\\[#[A-D]\\]"
                                             'todo '("TOCOMPLETE" "COMPLETING"))))))

   ;; Tasks in the inbox
   (setq alc-org-acc-inbox
         '(tags-todo "inbox"
                ((org-agenda-overriding-header "Tasks in the inbox\n"))))

   ;; Block views

   ;; Daily digest
   (setq alc-org-acc-block-today
         `((,alc-org-acc-events-today
            ,(alc-org-add-option
              alc-org-acc-scheduled-today
              '(org-agenda-skip-function 'alc-org-acc-scheduled-today-filter))
            ,alc-org-acc-inbox
            ,alc-org-acc-deadlines
            ,alc-org-acc-waiting)
           ((org-agenda-format-date ""))))

   (defun alc-org-acc-scheduled-today-filter ()
       (let ((subtree-end (save-excursion (org-end-of-subtree t))))
         (if (or (member "ménage" (org-get-tags-at))
                 (member (org-get-todo-state) '("WAITING" "HOLD" "DONE" "CANCELED")))
             subtree-end	; skip
           nil)))		; don't skip

   ;; No timestamp (by priority)
   (setq alc-org-acc-block-priority
         `((,alc-org-acc-high-priority
            ,alc-org-acc-medium-priority
            ,alc-org-acc-low-priority
            ,alc-org-acc-no-priority)
           ((org-agenda-skip-function
             '(org-agenda-skip-entry-if 'timestamp)))))

   ;; Wrapping up
   (setq org-agenda-custom-commands
         `(;; Daily digest
           ("d" "To[d]ay" ,@alc-org-acc-block-today)
           ;; No timestamp
           ("n" "[N]o timestamp" ,@alc-org-acc-block-priority)
           ;; Events
           ("v" . "E[v]ents...")
           ("vt" "Events [t]oday" ,@alc-org-acc-events-today)     
           ("vw" "Events this [w]eek" ,@alc-org-acc-events-week)
           ("vm" "Events this [m]onth" ,@alc-org-acc-events-month)
           ;; Scheduled tasks
           ("h" . "Sc[h]eduled tasks...")
           ("hd" "Scheduled to[d]ay" ,@alc-org-acc-scheduled-today)
           ("hf" "Scheduled for the next fortnight" ,@alc-org-acc-scheduled-fortnight)
           ;; Cleaning
           ("c" "[C]leaning" ,@alc-org-acc-cleaning-today)))
 #+END_SRC

** Exporting

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-ascii-links-to-notes nil)
#+END_SRC

** Org publish

 #+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-publish-project-alist
         `(("org-notes"
            :base-directory ,alc-website-base-dir
            :base-extension "org"
            :publishing-directory ,alc-website-pub-dir
            :recursive t
            :publishing-function org-html-publish-to-html
            :headline-levels 4             ; Just the default for this project.
            :auto-preamble t
            :html-preamble alc-org-mode-blog-preamble)
           ("org-static"
            :base-directory ,alc-website-base-dir
            :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
            :publishing-directory ,alc-website-pub-dir
            :recursive t
            :publishing-function org-publish-attachment)
           ("org" :components ("org-notes" "org-static"))
           ("emacs-config"
            :base-directory ,user-emacs-directory
            :base-extension "org"
            :publishing-directory ,alc-emacs-config-pub-dir
            :recursive t
            :publishing-function org-html-publish-to-html
            :exclude "elpa"
            ;; :headline-levels 4
            :auto-preamble t)))

   (defun alc-org-mode-blog-preamble (options)
     "The function that creates the preamble top section for the blog.
   OPTIONS contains the property list from the org-mode export."
     (let ((base-directory (plist-get options :base-directory)))
       (org-babel-with-temp-filebuffer (expand-file-name "top-bar.html" base-directory) (buffer-string))))
 #+END_SRC

** Custom functions

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun alc-org-insert-cookie-end-of-heading ()
    "Insert a cookie at the end of the current heading and update
      it, unless it is already here. In that case, delete it."
    (interactive)
    (save-excursion
      (unless (org-at-heading-p)
        (org-back-to-heading))
      (beginning-of-line)
      (if (not (looking-at ".* \\[[0-9]*/[0-9]*\\]"))
          (progn
            (org-end-of-line)
            (insert " [/]")
            (org-update-statistics-cookies nil)
            (alc-org-change-tags-column))
        (progn
          (replace-regexp "\\(.*\\) \\[[0-9]*/[0-9]*\\]\\(.*\\)" "\\1\\2" nil (point) (save-excursion (end-of-line) (point)))
          (alc-org-change-tags-column)))))

  (defun alc-org-schedule-if-doing-or-waiting ()
    "Schedule when the task is marked DOING or WAITING, unless the
  item is already scheduled."
    (when (and (or (string= org-state "DOING")
                   (string= org-state "WAITING"))
               (not (string= org-last-state org-state))
               (not (org-get-scheduled-time (point))))
      (org-schedule nil "")))

  (add-hook 'org-after-todo-state-change-hook
            'alc-org-schedule-if-doing-or-waiting)

  ;; https://emacs.stackexchange.com/a/9588
  (require 'cl-lib)
  (require 'dash)

  (defun alc-todo-to-int (todo)
    (cl-first (-non-nil
            (mapcar (lambda (keywords)
                      (let ((todo-seq
                             (-map (lambda (x) (cl-first (split-string  x "(")))
                                   (cl-rest keywords)))) 
                        (cl-position-if (lambda (x) (string= x todo)) todo-seq)))
                    org-todo-keywords))))

  (defun alc-org-sort-key ()
    (let* ((todo-max (apply #'max (mapcar #'length org-todo-keywords)))
           (todo (org-entry-get (point) "TODO"))
           (todo-int (if todo (alc-todo-to-int todo) todo-max))
           (priority (org-entry-get (point) "PRIORITY"))
           (priority-int (if priority (string-to-char priority) org-default-priority)))
      (format "%03d %03d" todo-int priority-int)
      ))

  (defun alc-org-sort-entries ()
    (interactive)
    (org-sort-entries nil ?f #'alc-org-sort-key))
#+END_SRC

** =org-crypt=

#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load "org-crypt"
    (setq org-crypt-key "F62FE7A4"))
#+END_SRC

** =org-pomodoro=

#+BEGIN_SRC emacs-lisp :tangle no
  (with-eval-after-load "org-pomodoro"
    (add-hook 'org-pomodoro-finished-hook
              (lambda ()
                (alc-growl :title "Pomodoro terminé !"
                           :message "Une pause s'impose.")))

    (add-hook 'org-pomodoro-long-break-finished-hook
              (lambda ()
                (alc-growl :title "Longue pause terminée !"
                           :message "Au travail !")))

    (add-hook 'org-pomodoro-short-break-finished-hook
              (lambda ()
                (alc-growl :title "Break terminé !"
                           :message "Continuons !"))))
#+END_SRC

** =org-tree-slide=

#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load 'org-tree-slide
    (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
    (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree))
#+END_SRC

* Lisp

#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load 'slime
    (when (equal alc-current-system "laptop-linux")
      (setq slime-contribs '(slime-fancy)
            slime-protocol-version 'ignore)
      (setq inferior-lisp-program "sbcl"))

    (defun alc-swank-listening-p ()
      (ignore-errors
        (let ((p (open-network-stream "SLIME Lisp Connection Test" nil "localhost" 4005)))
          (when p
            (delete-process p)
            t))))

    (defun alc-swank-autoconnect (&rest args)
      (if (and (not (slime-connected-p))
               (alc-swank-listening-p))
          (ignore-errors (slime-connect "localhost" 4005))))

    (alc-swank-autoconnect))
#+END_SRC

* ESS

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ess
    :ensure t)
#+END_SRC

https://github.com/myuhe/ess-R-data-view.el

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ess-R-data-view
    :ensure t)
#+END_SRC

* Communication

** ERC

#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load 'erc
    (define-key erc-mode-map (kbd "C-c C-x") nil)
    (setq erc-autojoin-channels-alist '((".*\\.freenode.net"
                                         "#stumpwm"
                                         "#lisp"
                                         "#emacs"
                                         ))))
#+END_SRC

* Mail and News

Personal configuration for my [[https://github.com/alecigne/.emacs.d/blob/develop/modules/swanemacs-mail-news.org][mail and news]] module.

** Elfeed

#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'swanemacs-mail-news
    (setq elfeed-feeds
          '("https://news.ycombinator.com/rss"
            ("https://www.reddit.com/r/emacs/.rss" emacs)
            ("http://sachachua.com/blog/category/emacs-news/feed" emacs)
            ("http://endlessparentheses.com/atom.xml" emacs)
            ("http://www.masteringemacs.org/feed/" emacs)
            ("http://emacs-fu.blogspot.com/feeds/posts/default" emacs)
            ("http://emacsredux.com/atom.xml" emacs)
            ("http://emacshorrors.com/feed.atom" emacs)
            ("http://pragmaticemacs.com/feed/" emacs))
          elfeed-search-filter ""))
#+end_src

* Gadgets

#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load "swanemacs-gadgets"
    (define-key global-map (kbd "H-<f10>") 'writeroom-mode))
#+END_SRC

